#!/usr/bin/env python3


import json
import locale
import sys
import reports
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item

    best_selling_model = {"total_sales": 0}

    for item in data:
        item_sales = item["total_sales"]

        if item_sales > best_selling_model["total_sales"]:
            best_selling_model = item 

    best_year = {"car_year": 0, "total_sales": 0}
    year_comparison = {}

    for item in data:
        item_year = item["car"]["car_year"]
        item_year_sales = item["total_sales"]

        if item_year in year_comparison:
            year_comparison[item_year] += item_year_sales
        else:
            year_comparison[item_year] = item_year_sales

    for year, sales in year_comparison.items():
        if sales > best_year["total_sales"]:
            best_year["car_year"] = year
            best_year["total_sales"] = sales

    summary = [
        "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(format_car(best_selling_model["car"]), best_selling_model["total_sales"]),
        "The most popular year was {} with {} sales.".format(best_year["car_year"], best_year["total_sales"])
    ]

    return summary


def cars_dict_to_table(data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("/home/julio-deb/Pruebas_Python/curso_final/proyecto3/test/car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  table_data = cars_dict_to_table(data)
  summary_text = "<br/>".join(summary)
  reports.generate("car_sales_report.pdf", "Car Sales Summary", summary_text, table_data)
  # TODO: send the PDF report as an email attachment
  message = emails.generate("automation@example.com", "student@example.com", "Sales summary for last month", summary_text, "car_sales_report.pdf")
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
